#|------------------------ IMPORTS -------------------|
import os, re, logging, asyncio

from random import randint as ri
from time import gmtime, strftime, sleep
from aiogram.types.message import ContentTypes
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.storage import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from config import TOKEN, BOT_URL, PROXIE_AUTH, PROXIE_URL, ADMINS_IDS, START_PLAYING_KEYBOARD,\
     HIT_KEYBOARD, BLOCK_KEYBOARD, SUPPORT_KEYBOARD, GOAL_RESULT, HIT_RESULT, BLOCK_RESULT, PLAY_ROUND_KEYBOARD, \
         TOURNS_MENU, MAIN_KEYBOARD_2, TEAMS_MENU, PLAYERS_MENU, MAIN_CANCEL

from states import TournamentForm, TeamForm, PlayerForm, GenerateTournamentForm, GetTournamentInfoForm, \
    PlayRound, GetArchiveTournamentForm, ConfirmPartForm

from get import get_tournaments_string, get_tournaments_dict, \
    get_teams_dict, get_teams_string, get_tournament_info, get_to_play_tournaments_string, \
        get_to_play_tournaments_dict, get_now_playing_tournament, \
            get_archive_tournaments_string, get_archive_tournaments_dict, get_archive_tournament_info_string,\
                 get_archive_tournament_schedule, get_archive_tourn_history, get_players_dict, get_players_string,\
                     get_seris_to_play, get_team_score, get_tournament_by_name, get_tournament_info_string,\
                         get_player_stat, get_best_hitter_blocker, get_archive_tourn_by_name

from add import add_tournament_to_json, add_team_to_tourn_json, add_player_to_team_json

from do import do_generate_tournament_json, do_archive_tournament, do_show_tournament_schedule_string, do_confirm_player_part

from set_info import set_now_playing_true, set_now_playing_false, set_next_round_to_play, set_hitted_to_play_json, set_blocked_to_play_json, set_is_goal_to_play_json

#|---------------------- CODE ------------------------|

logging.basicConfig(level=logging.INFO)

loop = asyncio.get_event_loop()

storage = MemoryStorage()

bot = Bot(token=TOKEN, proxy=PROXIE_URL, proxy_auth=PROXIE_AUTH)

dp = Dispatcher(bot, storage=storage, loop=loop)


@dp.callback_query_handler(lambda callback_query: True, state="*")
async def start_hit_block_results(callback_query: types.CallbackQuery, state: FSMContext):

    if callback_query.data == "main_cancel":
        
        if state:
            await state.reset_state(with_data=False)

        await callback_query.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=MAIN_KEYBOARD_2)
    
    elif callback_query.data == "start_round":

        if callback_query.from_user.id in ADMINS_IDS:
            is_set = await get_now_playing_tournament()

            t_t = await get_tournament_by_name(is_set["name"])

            if is_set["current_round"]["through_round_number"] == 1:
                pass # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞

            if is_set["current_round"]["number"] == 1:

                torun_hello = "–ú—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –Ω–∞ –º–∞—Ç—á–µ " + str(is_set["current_round"]["through_tour_number"]) + "-–≥–æ —Ç—É—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞ " + is_set["name"] +\
                    "!\n\n–í—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –∫–æ–º–∞–Ω–¥—ã\n" + is_set["current_round"]["1_player"]["team"].upper() + " –∏ " + is_set["current_round"]["2_player"]["team"].upper() +\
                        "\n\n–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤—ã –∏–≥—Ä–∞—é—â–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n" + "–ö–æ–º–∞–Ω–¥–∞ " + is_set["current_round"]["1_player"]["team"].upper() + ":\n"

                for team in is_set["teams"]:
                    if team["name"] == is_set["current_round"]["1_player"]["team"]:
                        n_o_p = 1
                        for player in team["players"]:
                            name = player["name"]
                            torun_hello += f"‚Ññ{n_o_p} {name}"
                            if player["name"] == player["captain_name"]:
                                torun_hello += " (–ö)"
                            torun_hello += "\n"
                            n_o_p += 1
                        break

                torun_hello = torun_hello + "\n–ö–æ–º–∞–Ω–¥–∞ " + is_set["current_round"]["2_player"]["team"].upper() + ":\n"

                for team in is_set["teams"]:
                    if team["name"] == is_set["current_round"]["2_player"]["team"]:
                        n_o_p = 1
                        for player in team["players"]:
                            name = player["name"]
                            torun_hello += f"‚Ññ{n_o_p} {name}"
                            if player["name"] == player["captain_name"]:
                                torun_hello += " (–ö)"
                            torun_hello += "\n"
                            n_o_p += 1
                        break


                torun_hello = torun_hello + "\n–ü–µ—Ä–µ–¥ —ç—Ç–∏–º –º–∞—Ç—á–µ–º, –∫–æ–º–∞–Ω–¥—ã –∑–∞–Ω–∏–º–∞—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—Ç–∞:\n\n"

                number = 1
                for team in is_set["teams"]:
                    name = team["name"]
                    score = team["score"]
                    goals = team["goals"]
                    misses = team["misses"]
                    
                    torun_hello += f"üéâ{number}-–µ –º–µ—Å—Ç–æ {name}\n–û—á–∫–∏: {score}\n–ó–∞–±-–ü—Ä–æ–ø: {goals}-{misses}\n\n"
                    number += 1

                torun_hello += "\n"

                torun_hello += await do_show_tournament_schedule_string(is_set["name"])

                torun_hello += "\n\n"

                torun_hello += await get_seris_to_play(is_set["name"], is_set["current_round"]["through_game_number"], is_set["current_round"]["taim"])

                await callback_query.message.answer(torun_hello)

            f_team_score = await get_team_score(is_set["name"], is_set["current_round"]["through_game_number"], 1)

            s_team_score = await get_team_score(is_set["name"], is_set["current_round"]["through_game_number"], 2)

            

            if is_set["current_round"]["number"] % 2 == 0:
                player_info = is_set["current_round"]["2_player"]["team"].upper() + " - " + is_set["current_round"]["1_player"]["team"].upper() + f" {f_team_score}:{s_team_score}\n" +\
                    str(is_set["current_round"]["taim"]) + "-–π —Ç–∞–π–º\n" + str(is_set["current_round"]["seria"]) + "-–Ø –°–ï–†–ò–Ø –£–î–ê–†–û–í. "
                player_info += "–û—Ç–≤–µ—Ç–Ω—ã–π —É–¥–∞—Ä\n"
            else:
                player_info = is_set["current_round"]["1_player"]["team"].upper() + " - " + is_set["current_round"]["2_player"]["team"].upper() + f" {f_team_score}:{s_team_score}\n" +\
                    str(is_set["current_round"]["taim"]) + "-–π —Ç–∞–π–º\n" + str(is_set["current_round"]["seria"]) + "-–Ø –°–ï–†–ò–Ø –£–î–ê–†–û–í. "

                player_info += "–ü–µ—Ä–≤—ã–π —É–¥–∞—Ä\n"


            player_info = player_info + "–ê—Ç–∞–∫—É–µ—Ç: " + is_set["current_round"]["1_player"]["name"].upper() + "\n–ó–∞—â–∏—â–∞–µ—Ç—Å—è: " + is_set["current_round"]["2_player"]["name"].upper()

            sleep(1)

            await callback_query.message.answer(player_info)
            

            hit_info = is_set["current_round"]["1_player"]["name"].upper() + " (" + is_set["current_round"]["1_player"]["team"] + ")\n" +\
                await get_player_stat(is_set, is_set["current_round"]["1_player"]["team"], is_set["current_round"]["1_player"]["name"]) + "\n" +\
                "–Ω–∞–Ω–æ—Å–∏—Ç —É–¥–∞—Ä –ø–æ –≤–æ—Ä–æ—Ç–∞–º:"

            sleep(2)

            await callback_query.message.answer(hit_info, reply_markup=HIT_KEYBOARD)
        else:
            return

    elif callback_query.data == "cancel_round":

        if callback_query.from_user.id in ADMINS_IDS:
            t = await get_now_playing_tournament()

            is_set = await set_now_playing_false(t["name"])
            await callback_query.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã.", reply_markup=MAIN_KEYBOARD_2)
        else:
            return
        
    
    elif callback_query.data in ["hit_left", "hit_center", "hit_right"]:

        now_playing = await get_now_playing_tournament()

        if callback_query.from_user.id in [now_playing["current_round"]["1_player"]["id"], now_playing["current_round"]["1_player"]["captain_id"]] or callback_query.from_user.id in ADMINS_IDS:

            hit_result = HIT_RESULT[callback_query.data]
            t = await set_hitted_to_play_json(hit_result)
            if t != -1:
                
                block_info = t["current_round"]["2_player"]["name"].upper() + " (" + t["current_round"]["2_player"]["team"] + ")\n" +\
                    await get_player_stat(t, t["current_round"]["2_player"]["team"], t["current_round"]["2_player"]["name"]) + "\n" +\
                    "–∑–∞—â–∏—â–∞–µ—Ç –≤–æ—Ä–æ—Ç–∞:"
                
                sleep(2)
                
                await callback_query.message.answer(block_info, reply_markup=BLOCK_KEYBOARD)

            else:
                await callback_query.message.answer("–û—à–∏–±–∫–∞! –ü—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É–¥–∞—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        else:
            return


    elif callback_query.data in ["block_left_center", "block_right_center", "block_left_right"]:

        now_playing = await get_now_playing_tournament()

        if callback_query.from_user.id in [now_playing["current_round"]["2_player"]["id"], now_playing["current_round"]["2_player"]["captain_id"]] or callback_query.from_user.id in ADMINS_IDS:
        
            block_result = BLOCK_RESULT[callback_query.data]

            t = await set_blocked_to_play_json(block_result)

            hit_result = t["current_round"]["hitted"]
            tour = t["current_round"]["through_tour_number"]

            text_result = GOAL_RESULT[(hit_result, block_result)][0]
            l_r_variant = ri(1, 5)
            long_result = GOAL_RESULT[(hit_result, block_result)][l_r_variant]
            is_goal = GOAL_RESULT[(hit_result, block_result)][-1]

            t_after_goal_result = await set_is_goal_to_play_json(is_goal)

            tourn_before_next = await get_tournament_by_name(t_after_goal_result["name"])

            is_set_to_next = await set_next_round_to_play(t_after_goal_result)

            f_team_score = await get_team_score(t["name"], t["current_round"]["through_game_number"], 1)

            s_team_score = await get_team_score(t["name"], t["current_round"]["through_game_number"], 2)

            goal_info = str(t["current_round"]["number"]) + "' " + text_result + f" {f_team_score}:{s_team_score}"

            if is_goal:
                goal_info = goal_info + " ‚öΩÔ∏è\n" + t["current_round"]["1_player"]["name"] + " (" + t["current_round"]["1_player"]["team"] + ") " + long_result
            
            else:
                goal_info = goal_info + " üö´\n" + t["current_round"]["2_player"]["name"] + " (" + t["current_round"]["2_player"]["team"] + ") " + long_result

            await callback_query.message.answer(goal_info)

            tourn_after_next = await get_tournament_by_name(t_after_goal_result["name"])

            if is_set_to_next != False:
                
                return_code, to_return = is_set_to_next
            
            else:

                await callback_query.message.answer("–û—à–∏–±–∫–∞!")
                return

            is_set = await set_now_playing_true(t_after_goal_result["name"])

            #‚öΩÔ∏èüö´ü•Öüî•üé¨‚åöÔ∏è

            if return_code[1]:

                if not return_code[4]:
                    
                    if not return_code[2]:
                    
                        fut_taim_text = "‚åöÔ∏è–ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –Ω–∞—á–Ω–µ—Ç—Å—è " + str(is_set["current_round"]["taim"]) + "-–π —Ç–∞–π–º –º–∞—Ç—á–∞ –∫–æ–º–∞–Ω–¥\n" +\
                            is_set["current_round"]["1_player"]["team"] + " –∏ " + is_set["current_round"]["2_player"]["team"] + ".\n\n"

                        sleep(2)

                        await callback_query.message.answer(fut_taim_text)

                        fut_taim_schedule = await get_seris_to_play(is_set["name"], is_set["current_round"]["through_game_number"], is_set["current_round"]["taim"])

                        sleep(2)

                        await callback_query.message.answer(fut_taim_schedule)

                taim_result = to_return[1]
                prev_tai = t_after_goal_result["current_round"]["taim"]

                prev_taim_text = "üé¨–ü–æ—Å–ª–µ " + str(prev_tai) + "-–≥–æ —Ç–∞–π–º–∞, —Å—á–µ—Ç " + str(taim_result["1_score"]) + ":" + str(taim_result["2_score"]) + ",\n"

                if taim_result["1_score"] > taim_result["2_score"]:

                    prev_taim_text = prev_taim_text + "–≤–ø–µ—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥–∞ " + taim_result["1_team"]["name"] + "!\n\n"

                    first_score = 0
                    second_score = 0

                    first_team_name = taim_result["1_team"]["name"]
                    
                    second_team_name = taim_result["2_team"]["name"]

                    for roun in taim_result["rounds"]:
                        if roun["taim"] == prev_tai:
                            if roun["goal"]:
                                if roun["1_player"]["team"] == first_team_name:
                                    first_score += 1
                                else:
                                    second_score += 1

                    first_score = taim_result["1_score"] - first_score
                    second_score = taim_result["2_score"] - second_score

                    for roun in taim_result["rounds"]:
                        if roun["taim"] == prev_tai:
                            if roun["goal"]:
                                if roun["1_player"]["team"] == first_team_name:
                                    first_score += 1
                                else:
                                    second_score += 1

                                prev_taim_text = prev_taim_text + "‚öΩÔ∏è" + str(roun["number"]) + "' " + roun["1_player"]["name"] + " (" + roun["1_player"]["team"] +\
                                     f", {first_score}:{second_score})\n"

                elif taim_result["1_score"] < taim_result["2_score"]:

                    prev_taim_text = prev_taim_text + "–≤–ø–µ—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥–∞ " + taim_result["2_team"]["name"] + "!\n\n"

                    first_score = 0
                    second_score = 0

                    
                    first_team_name = taim_result["1_team"]["name"]
                    
                    second_team_name = taim_result["2_team"]["name"]

                    for roun in taim_result["rounds"]:
                        if roun["taim"] == prev_tai:
                            if roun["goal"]:
                                if roun["1_player"]["team"] == first_team_name:
                                    first_score += 1
                                else:
                                    second_score += 1

                    first_score = taim_result["1_score"] - first_score
                    second_score = taim_result["2_score"] - second_score
                    

                    for roun in taim_result["rounds"]:
                        if roun["taim"] == prev_tai:
                            if roun["goal"]:
                                if roun["1_player"]["team"] == first_team_name:
                                    first_score += 1
                                else:
                                    second_score += 1

                                prev_taim_text = prev_taim_text + "‚öΩÔ∏è" + str(roun["number"]) + "' " + roun["1_player"]["name"] + " (" + roun["1_player"]["team"] +\
                                     f", {first_score}:{second_score})\n"

                elif taim_result["1_score"] == taim_result["2_score"]:
                    
                    prev_taim_text = prev_taim_text + "–Ω–∏—á—å—è –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ " + taim_result["1_team"]["name"] + " –∏ " + taim_result["2_team"]["name"] + "!\n\n"

                    first_score = 0
                    second_score = 0

                    first_team_name = taim_result["1_team"]["name"]
                    
                    second_team_name = taim_result["2_team"]["name"]



                    for roun in taim_result["rounds"]:
                        if roun["taim"] == prev_tai:
                            if roun["goal"]:
                                if roun["1_player"]["team"] == first_team_name:
                                    first_score += 1
                                else:
                                    second_score += 1

                    first_score = taim_result["1_score"] - first_score
                    second_score = taim_result["2_score"] - second_score

                    for roun in taim_result["rounds"]:
                        if roun["taim"] == prev_tai:
                            if roun["goal"]:
                                if roun["1_player"]["team"] == first_team_name:
                                    first_score += 1
                                else:
                                    second_score += 1

                                prev_taim_text = prev_taim_text + "‚öΩÔ∏è" + str(roun["number"]) + "' " + roun["1_player"]["name"] + " (" + roun["1_player"]["team"] +\
                                     f", {first_score}:{second_score})\n"
                
                sleep(2)

                await callback_query.message.answer(prev_taim_text)


            if return_code[2]:
                game_results = to_return[2]
                game_number = game_results["number"]
                f_team_name = game_results["1_team"]["name"].upper()
                f_team_score = game_results["1_score"]
                s_team_name = game_results["2_team"]["name"].upper()
                s_team_score = game_results["2_score"]
                winner = game_results["winner"]
                t_winner = ""
                cur_tour_number = str(is_set["current_round"]["through_tour_number"])
                tourn_name = is_set["name"]

                if len(winner) == 2:
                    f_get = 1
                    s_get = 1
                    result = f"üëë–ó–∞–≤–µ—Ä—à–∏–ª—Å—è –º–∞—Ç—á {cur_tour_number}-–≥–æ —Ç—É—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞ {tourn_name} –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ {f_team_name} –∏ {s_team_name}\n–ù–∏—á—å—è {f_team_score}:{s_team_score}\n\n"

                else:
                    
                    win_get = 3
                    loser_get = 0

                    if winner["name"].upper() == f_team_name:
                        result = f"üëë–ó–∞–≤–µ—Ä—à–∏–ª—Å—è –º–∞—Ç—á {cur_tour_number}-–≥–æ —Ç—É—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞ {tourn_name}. –°–æ —Å—á–µ—Ç–æ–º {f_team_score}:{s_team_score} –∫–æ–º–∞–Ω–¥–∞ {f_team_name} –æ–¥–µ—Ä–∂–∞–ª–∞ –ø–æ–±–µ–¥—É –Ω–∞–¥ –∫–æ–º–∞–Ω–¥–æ–π {s_team_name}\n\n"

            

                    else:
                        result = f"üëë–ó–∞–≤–µ—Ä—à–∏–ª—Å—è –º–∞—Ç—á {cur_tour_number}-–≥–æ —Ç—É—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞ {tourn_name}. –°–æ —Å—á–µ—Ç–æ–º {s_team_score}:{f_team_score} –∫–æ–º–∞–Ω–¥–∞ {s_team_name} –æ–¥–µ—Ä–∂–∞–ª–∞ –ø–æ–±–µ–¥—É –Ω–∞–¥ –∫–æ–º–∞–Ω–¥–æ–π {f_team_name}\n\n"

                result += f"{f_team_name} - {s_team_name} {f_team_score} : {s_team_score}\n"


                first_score = 0
                second_score = 0
                
                for roun in game_results["rounds"]:
                    if roun["goal"]:
                        if roun["1_player"]["team"] == first_team_name:
                            first_score += 1
                        else:
                            second_score += 1

                first_score = f_team_score - first_score
                second_score = s_team_score - second_score

                for roun in game_results["rounds"]:
                    if roun["goal"]:
                        if roun["1_player"]["team"] == first_team_name:
                            first_score += 1
                        else:
                            second_score += 1
                        
                        result = result + "‚öΩÔ∏è" + str(roun["number"]) + "' " + roun["1_player"]["name"] + " (" + roun["1_player"]["team"] +\
                                f") {first_score}:{second_score}\n"

                #üëë‚öΩÔ∏èüé¨üéâ

                result += "\nüé¨–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:\n"
                
                n_o_t = 1
                for team in is_set["teams"]:
                    name = team["name"]
                    score = team["score"]
                    goals = team["goals"]
                    misses = team["misses"]
                    
                    result += f"üéâ{n_o_t}-–µ –º–µ—Å—Ç–æ {name}\n–û—á–∫–∏: {score}\n–ó–∞–±-–ü—Ä–æ–ø: {goals}-{misses}\n\n"
                    n_o_t += 1

                sleep(2)


                await callback_query.message.answer(result)

            if return_code[3]:

                #ü•áü•àü•â

                sleep(1)
                await callback_query.message.answer(f"–¢—É—Ä –Ω–æ–º–µ—Ä {tour} –∑–∞–≤–µ—Ä—à–µ–Ω:\n")
                semi_result = "üé¨–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:\n"

                for number, name, score, goals, misses in to_return[3]:
                    
                    semi_result += f"üéâ{number}-–µ –º–µ—Å—Ç–æ {name}\n–û—á–∫–∏: {score}\n–ó–∞–±-–ü—Ä–æ–ø: {goals}-{misses}\n\n"

                sleep(1)

                await callback_query.message.answer(semi_result)

            if return_code[4]:

                sleep(1)

                await callback_query.message.answer("üëë–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–¥—Ä–æ–±–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Ç—É—Ä–Ω–∏—Ä–∞ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ê—Ä—Ö–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö.", reply_markup=MAIN_KEYBOARD_2)
                
                bests = await get_best_hitter_blocker(is_set["teams"])
                
                result = "üî•–§–∏–Ω–∞–ª—å–Ω–∞—è —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:üî•\n"
                
                for number, name, score, winning, goals, misses in to_return[4]:
                    if number == 1:
                        result += "ü•á"
                    elif number == 2:
                        result += "ü•à"
                    elif number == 3:
                        result += "ü•â"
                    else:
                        result += "üéâ"

                    result += f"{number}-–µ –º–µ—Å—Ç–æ {name}\n–û—á–∫–∏: {score}\n–í—ã–∏–≥—Ä—ã—à: {winning}\n–ó–∞–±-–ü—Ä–æ–ø: {goals}-{misses}\n\n"

                sleep(1)

                await callback_query.message.answer(bests)
                
                sleep(1)

                await callback_query.message.answer(result)

                is_set = await set_now_playing_false(t_after_goal_result["name"])

                is_archived = await do_archive_tournament(t_after_goal_result["name"])

                sleep(1)

                his = await get_archive_tourn_history(t_after_goal_result["name"])

                if len(his) > 4096:
                    for x in range(0, len(his), 4096):
                        await callback_query.message.answer(his[x:x+4096])
                else:
                        await callback_query.message.answer(his)

            if return_code[0] and not return_code[4]:
                if to_return[0]:
                    sleep(1)
                    await callback_query.message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥, –∞—Ä–±–∏—Ç—Ä –º–∞—Ç—á–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å '–ù–∞—á–∞—Ç—å'.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–∞—Ç—å '–û—Ç–º–µ–Ω–∞'.", reply_markup=PLAY_ROUND_KEYBOARD)

                else:
                    await callback_query.message.answer("–û—à–∏–±–∫–∞!")
        else:
            return


@dp.message_handler(commands=['start'])
async def send_start(message: types.Message):
    start_text = """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫—Ä–æ—É–Ω–±–æ–ª–∞ - –Ω–æ–≤–æ–≥–æ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≤ –ø–µ—Ä–∏–æ–¥ —Å–∞–º–æ–∏–∑–æ–ª—è—Ü–∏–∏.üëΩ

–ö—Ä–æ—É–Ω–±–æ–ª (Crownball) - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–Ω–∞—è –∏–≥—Ä–∞ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.‚öΩÔ∏è

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ - –æ—Ç 1 –¥–æ 3 (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—É—Ä–Ω–∏—Ä–∞).üèÜ
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞ - –æ—Ç 3 –¥–æ 15 –º–∏–Ω—É—Ç.‚åöÔ∏è
–ú–∞—Ç—á–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ –¢–µ–ª–µ–≥—Ä–∞–º.üì≤

–ú—ã –ø—Ä–æ–≤–æ–¥–∏–º –∫–∞–∫ –æ–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–µ, —Ç–∞–∫ –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ –∫—Ä–æ—É–Ω–±–æ–ª—É.üìà
–ê —Ç–∞–∫–∂–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã —Å –ø—Ä–∏–∑–æ–≤—ã–º —Ñ–æ–Ω–¥–æ–º!üí∞

–ï—Å–ª–∏ –í—ã –ø–æ–ø–∞–ª–∏ —Å—é–¥–∞ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã, 
—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞.

–ï—Å–ª–∏ –í—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–∞–±—Ä–µ–ª–∏ –Ω–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∏ —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å, 
—Ç–æ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —É—Ç–æ—á–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.

–ï—Å–ª–∏ –í—ã –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∞—Ä–±–∏—Ç—Ä –º–∞—Ç—á–∞, 
—Ç–æ –í–∞–º —Å–ª–µ–¥—É–µ—Ç –Ω–∞–∂–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.

–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫—Ä–æ—É–Ω–±–æ–ª–∞,
–Ω–∞–∂–º–∏—Ç–µ /help.üìï

–ù–∞—à —Å–∞–π—Ç http://wmfl.ru üåç
–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ - https://vk.com/rfleague üíå

–í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –Ω–∞ –∏–≥—Ä–µ!üî•
    """
    await message.answer(start_text, reply_markup=MAIN_KEYBOARD_2)


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    help_text = """
üìï–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

1. –ò–ì–†–û–ö

–ï—Å–ª–∏ –í—ã –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä–æ–º—É –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –≤—Å–µ —á—Ç–æ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å - —ç—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π—Ç–∏ —à–∞–≥–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –Ω–µ–π, –∞ –∏–º–µ–Ω–Ω–æ:

–∞) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò–≥—Ä–æ–∫–∏' (–µ—Å–ª–∏ —É –í–∞—Å –µ–µ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é')

b) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ'

c) –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –∑–∞–ø–∏—Å–∞–Ω —Ç—É—Ä–Ω–∏—Ä, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –í–∞—à–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

d) –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –∑–∞–ø–∏—Å–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞, —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ –í–∞—à–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

e) –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–ø–∏—Å–∞–Ω–æ –í–∞—à–µ –∏–º—è

f) –°–æ–æ–±—â–∏—Ç–µ –∫–∞–ø–∏—Ç–∞–Ω—É –∫–æ–º–∞–Ω–¥—ã –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É—á–∞—Å—Ç–∏—è –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ–±—ã—Ç–∏—è–º–∏ –≤ —á–∞—Ç–µ –∏–≥—Ä—ã!

2. –ö–ê–ü–ò–¢–ê–ù –ö–û–ú–ê–ù–î–´

–ï—Å–ª–∏ –í—ã –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã –∏ –í–∞–º —Å–æ–æ–±—â–∏–ª–∏ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞, —Ç–æ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

–∞) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö–æ–º–∞–Ω–¥—ã'

b) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É'

—Å) –ò–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ù–û–ú–ï–† –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ (–≤ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É-–Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞)

d) –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã

–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã, –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤:

–∞) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò–≥—Ä–æ–∫–∏' (–µ—Å–ª–∏ —É –í–∞—Å –µ–µ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é')

b) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞'

c) –ò–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ù–û–ú–ï–† –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞

d) –ò–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ù–û–ú–ï–† –í–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã

e) –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–±—è, –∫–∞–∫ –∫–∞–ø–∏—Ç–∞–Ω–∞ - –ø–µ—Ä–µ–¥ —Å–≤–æ–∏–º –∏–º–µ–Ω–µ–º –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –ö–∞–ø–∏—Ç–∞–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö–∞–ø–∏—Ç–∞–Ω –ö–∏—Ä–∏–ª–ª'
–ï—Å–ª–∏ –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–µ–±—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞.

f) –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞, –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫—É –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∏–ª —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ.

g) –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ —à–∞–≥–∏ b) - g)

h) –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —É–≤–µ–¥–æ–º–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤,
–∞ —Ç–∞–∫–∂–µ, –ø—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ, —á—Ç–æ–±—ã –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ.

3. –ê–†–ë–ò–¢–†

–ï—Å–ª–∏ –í—ã –∞—Ä–±–∏—Ç—Ä –º–∞—Ç—á–∞, —Ç–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ò–≥—Ä–∞—Ç—å' –∏ –∑–∞—Ç–µ–º (–∫–æ–≥–¥–∞ –≤—Å–µ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã) –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å',
–≤ —Ç–µ—á–µ–Ω–∏–∏ –∏–≥—Ä—ã –≤–Ω–æ–≤—å –Ω–∞–∂–∏–º–∞–π—Ç–µ '–ù–∞—á–∞—Ç—å', –µ—Å–ª–∏ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –∏–ª–∏ '–û—Ç–º–µ–Ω–∞', –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.

4. –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†

–ï—Å–ª–∏ –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥–∏:

–∞) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–¢—É—Ä–Ω–∏—Ä—ã'

b) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä' –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∏–∞–ª–æ–≥–æ–º—É –ø–æ—Ä—è–¥–∫—É –±–æ—Ç–∞

—Å) –ü–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞, —É–≤–µ–¥–æ–º–∏—Ç–µ –≤—Å–µ—Ö –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∫–æ–º–∞–Ω–¥,
—á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥ –∏ –∏–≥—Ä–æ–∫–æ–≤ (–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥, –Ω–∞–∂–º–∏—Ç–µ '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä)

d) –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ –∫–∞–ø–∏—Ç–∞–Ω—ã —É–≤–µ–¥–æ–º–∏–ª–∏ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –æ —Ç–æ–º, —á—Ç–æ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ,
–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç—É—Ä–Ω–∏—Ä–∞

e) –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å–µ –∫–∞–ø–∏—Ç–∞–Ω—ã –¥–æ–±–∞–≤–∏–ª–∏ –∫–æ–º–∞–Ω–¥ –∏ –∏–≥—Ä–æ–∫–æ–≤, –∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ,
–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä' –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏–≥—Ä—ã –≤ –Ω–µ–≥–æ

f) –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞, –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –µ–≥–æ –≤ '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö'

g) –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞, –æ–ø–∏—Å–∞–Ω–Ω–æ–π –≤—ã—à–µ


4. –°–õ–£–ß–ê–ô–ù–´–ô –ò–ù–¢–ï–†–ù–ï–¢–ù–´–ô –ü–†–û–•–û–ñ–ò–ô

–ï—Å–ª–∏ –í—ã —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ö–æ–∂–∏–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –í–ö, —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏,
–∏ —É—Ç–æ—á–Ω–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤

–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ –∏–ª–∏ –í—ã –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞–∑–∞—Ç—å '–°–ø–∞—Å–∏–±–æ' —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É - –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ @zhozh_peppa.
–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!
    """
    await message.answer(help_text, reply_markup=MAIN_KEYBOARD_2)


@dp.message_handler(lambda message: message.text.lower() == "–Ω–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é")
async def main_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:", reply_markup=MAIN_KEYBOARD_2)


@dp.message_handler(lambda message: message.text.lower() == "—Ç—É—Ä–Ω–∏—Ä—ã")
async def tournaments_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=TOURNS_MENU)


@dp.message_handler(lambda message: message.text.lower() == "–∫–æ–º–∞–Ω–¥—ã")
async def teams_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=TEAMS_MENU)


@dp.message_handler(lambda message: message.text.lower() == "–∏–≥—Ä–æ–∫–∏")
async def players_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=PLAYERS_MENU)


@dp.message_handler(lambda message: message.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä")
async def add_tournament(message: types.Message):
    if message.chat.id in ADMINS_IDS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:", reply_markup=MAIN_CANCEL)
        await TournamentForm.name.set()
    else:
        return


@dp.message_handler(state=TournamentForm.name)
async def get_tournament_name(message: types.Message, state: FSMContext):
    if message.chat.id in ADMINS_IDS:
        await state.update_data(name=message.text)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ: (–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞)", reply_markup=MAIN_CANCEL)
        await message.answer("1. –í 1 –∫—Ä—É–≥")

        await TournamentForm.typeOfTournament.set()
    else:
        return


@dp.message_handler(state=TournamentForm.typeOfTournament)
async def get_tournament_type(message: types.Message, state: FSMContext):

    if message.chat.id in ADMINS_IDS:
        tot = message.text

        types_of_tournaments = {
            1: "–í 1 –∫—Ä—É–≥"
        }

        if tot.isdigit():
            if int(tot) in range(1, 2):
                await state.update_data(typeOfTournament=types_of_tournaments[int(tot)])
                await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π –≤–∑–Ω–æ—Å: ", reply_markup=MAIN_CANCEL)
                await TournamentForm.bet.set()
            else:
                await message.answer("–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=MAIN_CANCEL)
                await TournamentForm.typeOfTournament.set()
        else:
            await message.answer("–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=MAIN_CANCEL)
            await TournamentForm.typeOfTournament.set()
    else:
        return


@dp.message_handler(state=TournamentForm.bet)
async def get_tournament_bet(message: types.Message, state: FSMContext):
    if message.chat.id in ADMINS_IDS:
        tourn_bet = message.text

        if tourn_bet.isdigit():
            await state.update_data(bet=tourn_bet)
            await TournamentForm.amount_of_teams.set()
            await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥:", reply_markup=MAIN_CANCEL)
        else:
            await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=MAIN_CANCEL)
            await TournamentForm.bet.set()
    else:
        return


@dp.message_handler(state=TournamentForm.amount_of_teams)
async def get_tournament_amount_of_teams(message: types.Message, state: FSMContext):
    if message.chat.id in ADMINS_IDS:
        num_of_teams = message.text
        if num_of_teams.isdigit():
            if int(num_of_teams) in range(2, 17):
                await state.update_data(amount_of_teams=int(num_of_teams))
                await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö: ", reply_markup=MAIN_CANCEL)
                await TournamentForm.amount_of_players.set()
            else:
                await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 2 –¥–æ 16.", reply_markup=MAIN_CANCEL)
                await TournamentForm.amount_of_teams.set()
        else:
            await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=MAIN_CANCEL)
            await TournamentForm.amount_of_teams.set()
    else:
        return


@dp.message_handler(state=TournamentForm.amount_of_players)
async def get_tournament_amount_of_players(message: types.Message, state: FSMContext):
    if message.chat.id in ADMINS_IDS:
        num_of_players = message.text
        if num_of_players.isdigit():
            if int(num_of_players) in range(1, 4):
                await state.update_data(amount_of_players=int(num_of_players))
                await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å-–≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2020-04-24 12:00", reply_markup=MAIN_CANCEL)
                await TournamentForm.start_time.set()
            else:
                await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3.", reply_markup=MAIN_CANCEL)
                await TournamentForm.amount_of_players.set()
        else:
            await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=MAIN_CANCEL)
            await TournamentForm.amount_of_players.set()
    else:
        return


@dp.message_handler(state=TournamentForm.start_time)
async def get_tournament_start_time(message: types.Message, state: FSMContext):
    if message.chat.id in ADMINS_IDS:
        st_time = message.text
        await state.update_data(start_time=st_time)
        isAdded = await add_tournament_to_json(await state.get_data())
        tourn_data = await state.get_data()
        if isAdded:
            await message.answer(await get_tournament_info_string(tourn_data.get("name")))
            await message.answer("–¢—É—Ä–Ω–∏—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ –Ω–µ–º—É –∫–æ–º–∞–Ω–¥—ã.", reply_markup=MAIN_KEYBOARD_2)
            await state.reset_state(with_data=False)
        else:
            await message.answer("–û—à–∏–±–∫–∞! –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=MAIN_KEYBOARD_2)
            await state.reset_state(with_data=False)
    else:
        return


@dp.message_handler(lambda message: message.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
async def add_team_to_tournament(message: types.Message):
    if message.chat.id in ADMINS_IDS:
        t_string = await get_tournaments_string()
        if t_string:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π —Ç—É—Ä–Ω–∏—Ä –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É: (–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞)", reply_markup=MAIN_CANCEL)
            await message.answer(t_string)
            await TeamForm.tournament.set()
        else:
            await message.answer("–û—à–∏–±–∫–∞! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç—É—Ä–Ω–∏—Ä!", reply_markup=MAIN_KEYBOARD_2)
    else:
        return


@dp.message_handler(state=TeamForm.tournament)
async def get_teams_tournament(message: types.Message, state: FSMContext):
    if message.chat.id in ADMINS_IDS:
        num_of_t = message.text
        
        if num_of_t.isdigit():
            t_dict = await get_tournaments_dict()
            try:
                tourn = t_dict[int(num_of_t)]
                await state.update_data(tournament=tourn)
                await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=MAIN_CANCEL)
                await TeamForm.name.set()
            except:
                await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
                await TeamForm.tournament.set()

        else:
            await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
            await TeamForm.tournament.set()
    else:
        return


@dp.message_handler(state=TeamForm.name)
async def get_teams_name(message: types.Message, state: FSMContext):
    if message.chat.id in ADMINS_IDS:
        await state.update_data(name=message.text)
        isAdded = await add_team_to_tourn_json(await state.get_data())

        if isAdded:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=MAIN_KEYBOARD_2)
            await state.reset_state(with_data=False)
        else:
            await message.answer("–û—à–∏–±–∫–∞! –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—É—Ä–Ω–∏—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω.", reply_markup=MAIN_KEYBOARD_2)
            await state.reset_state(with_data=False)
    else:
        return


@dp.message_handler(lambda message: message.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞")
async def add_player_to_team(message: types.Message):
    t_string = await get_tournaments_string()
    if t_string:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π —Ç—É—Ä–Ω–∏—Ä –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞: (–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞)", reply_markup=MAIN_CANCEL)
        await message.answer(t_string)
        await PlayerForm.tournament.set()
    else:
        await message.answer("–û—à–∏–±–∫–∞! –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç—É—Ä–Ω–∏—Ä!", reply_markup=MAIN_KEYBOARD_2)


@dp.message_handler(state=PlayerForm.tournament)
async def get_player_tournament(message: types.Message, state: FSMContext):
    num_of_t = message.text
    
    if num_of_t.isdigit():
        t_dict = await get_tournaments_dict()
        try:
            tourn = t_dict[int(num_of_t)]
            await state.update_data(tournament=tourn)
            
            team_string = await get_teams_string(tourn)
            if team_string:
                await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:", reply_markup=MAIN_CANCEL)
                await message.answer(team_string)
                await PlayerForm.team.set()
            else:
                await message.answer("–û—à–∏–±–∫–∞! –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É!", reply_markup=MAIN_KEYBOARD_2)
                await state.reset_state(with_data=False)
        except:
            await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
            await PlayerForm.tournament.set()

    else:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
        await PlayerForm.tournament.set()


@dp.message_handler(state=PlayerForm.team)
async def get_player_team(message: types.Message, state: FSMContext):
    num_of_team = message.text
    
    if num_of_team.isdigit():
        data = await state.get_data()
        tourn = data.get("tournament")
        team_dict = await get_teams_dict(tourn)
        try:
            team = team_dict[int(num_of_team)]
            await state.update_data(team=team)
            await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞:", reply_markup=MAIN_CANCEL)
            await PlayerForm.name.set()
        except:
            await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
            await PlayerForm.team.set()
    else:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
        await PlayerForm.team.set()


@dp.message_handler(state=PlayerForm.name)
async def get_player_team(message: types.Message, state: FSMContext):
    text = message.text
    isCaptain = False

    if text.lower().startswith("–∫–∞–ø–∏—Ç–∞–Ω"):
        isCaptain = True
        name = " ".join(text.split()[1:])
        await state.update_data(name=name, idd=message.chat.id)
    else:
        name = text
        await state.update_data(name=name)
    
    data = await state.get_data()

    team_name = data.get("team")

    tourn_name = data.get("tournament")

    isAdded = await add_player_to_team_json(data, isCaptain)

    if isAdded:
        if isCaptain:
            await message.answer(f"{name}, –í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã {team_name}.")
            await state.reset_state(with_data=False)
        else:
            await message.answer(f"–ò–≥—Ä–æ–∫ {name} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É {team_name}.")
            inst = f"""
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–≥—Ä–æ–∫—É {name}, 
–æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ, –ø—Ä–æ–π–¥—è —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

1. –ó–∞–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º, @Mister_F_bot

2. –ü–µ—Ä–µ–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É –ò–≥—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

3. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ

4. –í—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –∑–∞–ø–∏—Å–∞–Ω —Ç—É—Ä–Ω–∏—Ä {tourn_name}

5. –í—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –∑–∞–ø–∏—Å–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {team_name}

–í–ù–ò–ú–ê–ù–ò–ï! –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ ‚Ññ6 –∏–≥—Ä–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ! –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–º–µ—Ä–∞!

6. –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–ø–∏—Å–∞–Ω–æ –µ–≥–æ –∏–º—è {name}.

7. –°–æ–æ–±—â–∏—Ç—å –∫–∞–ø–∏—Ç–∞–Ω—É –∫–æ–º–∞–Ω–¥—ã –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É—á–∞—Å—Ç–∏—è.
            """
            await message.answer(inst)
            await state.reset_state(with_data=False)
    else:
        await message.answer("–û—à–∏–±–∫–∞! –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –õ–∏–±–æ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –ª–∏–±–æ –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∫–∞–ø–∏—Ç–∞–Ω–∞.", reply_markup=MAIN_KEYBOARD_2)
        await state.reset_state(with_data=False)


@dp.message_handler(lambda message: message.text.lower() == "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ")
async def confirm_participation(message: types.Message):
    t_string = await get_tournaments_string()
    if t_string:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è: (–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞)", reply_markup=MAIN_CANCEL)
        await message.answer(t_string)
        await ConfirmPartForm.tournament.set()
    else:
        await message.answer("–û—à–∏–±–∫–∞! –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç—É—Ä–Ω–∏—Ä!", reply_markup=MAIN_KEYBOARD_2)


@dp.message_handler(state=ConfirmPartForm.tournament)
async def get_tourn_to_confirn_part(message: types.Message, state: FSMContext):
    num_of_t = message.text
    
    if num_of_t.isdigit():
        t_dict = await get_tournaments_dict()
        try:
            tourn = t_dict[int(num_of_t)]
            await state.update_data(tournament=tourn)
            
            team_string = await get_teams_string(tourn)
            if team_string:
                await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è:", reply_markup=MAIN_CANCEL)
                await message.answer(team_string)
                await ConfirmPartForm.team.set()
            else:
                await message.answer("–û—à–∏–±–∫–∞! –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É!", reply_markup=MAIN_KEYBOARD_2)
                await state.reset_state(with_data=False)
        except:
            await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
            await ConfirmPartForm.tournament.set()

    else:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
        await ConfirmPartForm.tournament.set()


@dp.message_handler(state=ConfirmPartForm.team)
async def get_team_to_confirm_part(message: types.Message, state: FSMContext):
    num_of_team = message.text
    
    if num_of_team.isdigit():
        data = await state.get_data()
        tourn = data.get("tournament")
        team_dict = await get_teams_dict(tourn)
        try:
            team = team_dict[int(num_of_team)]
            await state.update_data(team=team)
            
            p_string = await get_players_string(await state.get_data())
            if p_string:

                await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–ø–∏—Å–∞–Ω–æ –í–∞—à–µ –∏–º—è:\n–ë–£–î–¨–¢–ï –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–´! –û–¢–ü–†–ê–í–õ–Ø–Ø –ù–û–ú–ï–†, –í–´ –ü–û–î–¢–í–ï–†–ñ–î–ê–ï–¢–ï –£–ß–ê–°–¢–ò–ï –í –¢–£–†–ù–ò–†–ï!", reply_markup=MAIN_CANCEL)
                await message.answer(p_string)
                await ConfirmPartForm.name.set()
            else:
                await message.answer("–û—à–∏–±–∫–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã –≤–Ω–µ—Å–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–ø–∏—Å–æ–∫.", reply_markup=MAIN_KEYBOARD_2)

        except:
            await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
            await ConfirmPartForm.team.set()
    else:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
        await ConfirmPartForm.team.set()


@dp.message_handler(state=ConfirmPartForm.name)
async def get_player_name_to_confirm(message: types.Message, state: FSMContext):
    num_of_player = message.text
    
    if num_of_player.isdigit():

        if int(num_of_player) != 1:

            data = await state.get_data()
            player_dict = await get_players_dict(data)
            try:
                player = player_dict[int(num_of_player)]
                await state.update_data(name=player, idd=message.chat.id)

                isConfirmed = await do_confirm_player_part(await state.get_data())
                
                if isConfirmed:
                    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ! –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–≤–æ–π —Ö–æ–¥.", reply_markup=MAIN_KEYBOARD_2)
                    await state.reset_state(with_data=False)
                    
                else:
                    await message.answer("–û—à–∏–±–∫–∞! –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –í–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=MAIN_KEYBOARD_2)
                    await state.reset_state(with_data=False)

            except:
                await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –í–∞—à –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤.", reply_markup=MAIN_CANCEL)
                await ConfirmPartForm.name.set()

        else:
            await message.answer("–û—à–∏–±–∫–∞! –ö–∞–ø–∏—Ç–∞–Ω —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –°–í–û–ô –Ω–æ–º–µ—Ä. (–ï—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω, –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ –∫–∞–ø–∏—Ç–∞–Ω –¥–æ–±–∞–≤–∏—Ç –í–∞—Å –≤ —Å–ø–∏—Å–æ–∫)", reply_markup=MAIN_CANCEL)
            await ConfirmPartForm.name.set()
    else:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –í–∞—à –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤.", reply_markup=MAIN_CANCEL)
        await ConfirmPartForm.name.set()


@dp.message_handler(lambda message: message.text.lower() == "—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä")
async def generate_tournament(message: types.Message):
    if message.chat.id in ADMINS_IDS:
        t_string = await get_tournaments_string()
        if t_string:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ç—É—Ä–Ω–∏—Ä —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å: (–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞)", reply_markup=MAIN_CANCEL)
            await message.answer(t_string)
            await GenerateTournamentForm.tournament.set()
        else:
            await message.answer("–û—à–∏–±–∫–∞! –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç—É—Ä–Ω–∏—Ä!", reply_markup=MAIN_KEYBOARD_2)
    else:
        return


@dp.message_handler(state=GenerateTournamentForm.tournament)
async def get_tournament_to_generate(message: types.Message, state: FSMContext):
    if message.chat.id in ADMINS_IDS:
        num_of_t = message.text
        
        if num_of_t.isdigit():
            t_dict = await get_tournaments_dict()
            try:
                tourn = t_dict[int(num_of_t)]
                await state.update_data(tournament=tourn)
                isGenerated = await do_generate_tournament_json(await state.get_data())
                if isGenerated:
                    
                    await message.answer(await get_tournament_info_string(tourn))
                    
                    await message.answer(await do_show_tournament_schedule_string(tourn))

                    await message.answer("–¢—É—Ä–Ω–∏—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!", reply_markup=MAIN_KEYBOARD_2)

                    await state.reset_state(with_data=False)
                else:
                    await message.answer("–û—à–∏–±–∫–∞! –ü—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=MAIN_KEYBOARD_2)
                    await state.reset_state(with_data=False)
                
            except:
                await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
                await GenerateTournamentForm.tournament.set()

        else:
            await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
            await GenerateTournamentForm.tournament.set()
    else:
        return


@dp.message_handler(lambda message: message.text.lower() == "–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã")
async def get_tournament_info_by_name(message: types.Message):
    t_string = await get_tournaments_string()
    if t_string:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: (–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞)", reply_markup=MAIN_CANCEL)
        await message.answer(t_string)
        await GetTournamentInfoForm.name.set()
    else:
        await message.answer("–û—à–∏–±–∫–∞! –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç—É—Ä–Ω–∏—Ä!", reply_markup=MAIN_KEYBOARD_2)


@dp.message_handler(state=GetTournamentInfoForm.name)
async def get_tournament_name_to_get_info(message: types.Message, state: FSMContext):
    num_of_t = message.text
    
    if num_of_t.isdigit():
        t_dict = await get_tournaments_dict()
        try:
            tourn = t_dict[int(num_of_t)]
            await state.update_data(name=tourn)
            t = await state.get_data()
            isGot = await get_tournament_info(t.get("name"))
            
            if isGot:
                
                result = await get_tournament_info_string(tourn)

                await message.answer(result)
                
                
                if isGot["isFormed"] == True:
                    await message.answer(await do_show_tournament_schedule_string(tourn))

                await state.reset_state(with_data=False)


            else:
                await message.answer("–û—à–∏–±–∫–∞! –ü—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç—É—Ä–Ω–∏—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=MAIN_KEYBOARD_2)
                await state.reset_state(with_data=False)
            
        except:
            await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
            await state.reset_state(with_data=False)

    else:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
        await GetTournamentInfoForm.name.set()


@dp.message_handler(lambda message: message.text.lower() == "–∞—Ä—Ö–∏–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤")
async def archive_tournaments(message: types.Message):
    
    t_string = await get_archive_tournaments_string()
    if t_string:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ö–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: (–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞)", reply_markup=MAIN_CANCEL)
        await message.answer(t_string)
        await GetArchiveTournamentForm.name.set()
    else:
        await message.answer("–û—à–∏–±–∫–∞! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç—É—Ä–Ω–∏—Ä!", reply_markup=MAIN_KEYBOARD_2)


@dp.message_handler(state=GetArchiveTournamentForm.name)
async def get_archive_tourn_name(message: types.Message, state: FSMContext):
    num_of_t = message.text
    
    if num_of_t.isdigit():
        t_dict = await get_archive_tournaments_dict()
        try:
            tourn = t_dict[int(num_of_t)]
            await state.update_data(name=tourn)
            t = await state.get_data()
            isGot = await get_archive_tournament_info_string(tourn)
            
            if isGot:

                sleep(1)
                
                await bot.send_message(message.chat.id, isGot)

                sleep(1)
                
                await bot.send_message(message.chat.id, await get_archive_tournament_schedule(tourn))

                his = await get_archive_tourn_history(tourn)

                sleep(1)

                if len(his) > 4096:
                    for x in range(0, len(his), 4096):
                        await message.answer(his[x:x+4096])
                else:
                        await message.answer(his)

                ar_tourn = await get_archive_tourn_by_name(tourn)
                
                sleep(1)

                await bot.send_message(message.chat.id, await get_best_hitter_blocker(ar_tourn["teams"]))

                await state.reset_state(with_data=False)

            else:
                await message.answer("–û—à–∏–±–∫–∞! –ü—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç—É—Ä–Ω–∏—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=MAIN_KEYBOARD_2)
                await state.reset_state(with_data=False)
            
        except:
            await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
            await state.reset_state(with_data=False)

    else:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
        await GetArchiveTournamentForm.name.set()


@dp.message_handler(lambda message: message.text.lower() == "–∏–≥—Ä–∞—Ç—å")
async def play_button(message: types.Message):
    if message.from_user.id in ADMINS_IDS:
        t_string = await get_to_play_tournaments_string()
        if t_string:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –∏–≥—Ä—ã: (–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞)", reply_markup=MAIN_CANCEL)
            await message.answer(t_string)
            await PlayRound.tournament.set()
        else:
            await message.answer("–û—à–∏–±–∫–∞! –õ–∏–±–æ –æ–¥–∏–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å–µ–π—á–∞—Å –≤ –∏–≥—Ä–µ, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –Ω–∏ –æ–¥–∏–Ω —Ç—É—Ä–Ω–∏—Ä.", reply_markup=MAIN_KEYBOARD_2)
    else:
        await message.answer("–¢–æ–ª—å–∫–æ –∞—Ä–±–∏—Ç—Ä –º–∞—Ç—á–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")


@dp.message_handler(state=PlayRound.tournament)
async def get_tourn_to_play(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMINS_IDS:
        num_of_t = message.text
        if message.from_user.id in ADMINS_IDS:
        
            if num_of_t.isdigit():
                t_dict = await get_to_play_tournaments_dict()
                try:
                    tourn = t_dict[int(num_of_t)]
                    await state.update_data(tournament=tourn)
                    is_set = await set_now_playing_true(tourn)
                    
                    if is_set:

                        torun_hello = "–ú—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–µ " + is_set["name"].upper() + "!\n"
                            
                        main_info = await get_tournament_info_string(is_set["name"])
                        
                        torun_hello += main_info

                        sleep(1)

                        await message.answer(torun_hello)

                        sleep(2)

                        await message.answer(await do_show_tournament_schedule_string(is_set["name"]))

                        sleep(2)

                        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞ –∞—Ä–±–∏—Ç—Ä –º–∞—Ç—á–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å '–ù–∞—á–∞—Ç—å'.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–∞—Ç—å '–û—Ç–º–µ–Ω–∞'.", reply_markup=PLAY_ROUND_KEYBOARD)
                        await state.reset_state(with_data=False)

                    else:
                        await message.answer("–û—à–∏–±–∫–∞! –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=MAIN_KEYBOARD_2)
                        await state.reset_state(with_data=False)
                    
                except:
                    await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
                    await PlayRound.tournament.set()

            else:
                await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=MAIN_CANCEL)
                await PlayRound.tournament.set()
        else:
            return
    else:
        return


@dp.message_handler()
async def all_mes(message: types.Message):

    if message.text.lower().startswith("–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å"):
        return
        
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

